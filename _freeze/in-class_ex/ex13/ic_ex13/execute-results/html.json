{
  "hash": "0e514b8f1e84a1c0e4a289fbc6e33456",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 13\"\nauthor: \"Jeffery Lau\"\ndate: 11-11-2024\ndate-modified: \"last-modified\"\ndescription: |\n  In this exercise we learn to how to build predictive model by using geographical random forest method.\ncategories:\n  - In-class\nformat:\n  html:\n    toc: true\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# 1. Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, Metrics, tidyverse, yardstick)\n```\n:::\n\n\nWe will read and split the train/test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/model/mdata.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- mdata %>% sample_n(1500)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- HDB_sample %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\nsummary(overlapping_points$overlap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Mode   FALSE    TRUE \nlogical    1014     486 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- HDB_sample %>% st_jitter(amount = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(HDB_sample, \n                              prop = 6.67/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n\nwrite_rds(train_data, \"data/model/train_data.rds\")\nwrite_rds(test_data, \"data/model/test_data.rds\")\n\ntrain_data <- read_rds(\"data/model/train_data.rds\")\ntest_data <- read_rds(\"data/model/test_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>% st_drop_geometry()\nggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])\n```\n\n::: {.cell-output-display}\n![](ic_ex13_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, data=train_data, approach=\"CV\", kernel=\"gaussian\", adaptive = TRUE, longlat = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 625 CV score: 3.430854e+12 \nAdaptive bandwidth: 394 CV score: 3.217323e+12 \nAdaptive bandwidth: 250 CV score: 2.880633e+12 \nAdaptive bandwidth: 162 CV score: 2.562843e+12 \nAdaptive bandwidth: 107 CV score: 2.192137e+12 \nAdaptive bandwidth: 73 CV score: 1.813253e+12 \nAdaptive bandwidth: 52 CV score: 1.610669e+12 \nAdaptive bandwidth: 39 CV score: 1.470248e+12 \nAdaptive bandwidth: 31 CV score: 1.384987e+12 \nAdaptive bandwidth: 26 CV score: 1.345943e+12 \nAdaptive bandwidth: 23 CV score: 1.337153e+12 \nAdaptive bandwidth: 21 CV score: 1.325756e+12 \nAdaptive bandwidth: 19 CV score: 1.3046e+12 \nAdaptive bandwidth: 19 CV score: 1.3046e+12 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad <- gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, data=train_data, bw=20, kernel=\"gaussian\", adaptive = TRUE, longlat = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-11 19:50:19.350381 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data, bw = 20, kernel = \"gaussian\", adaptive = TRUE, \n    longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 1000\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-170603  -36231      66   36166  225177 \n\n   Coefficients:\n                            Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              156195.4    35186.0   4.439 1.01e-05 ***\n   floor_area_sqm             2488.2      287.9   8.643  < 2e-16 ***\n   storey_order              13783.6     1054.8  13.067  < 2e-16 ***\n   remaining_lease_mths        336.5       14.9  22.589  < 2e-16 ***\n   PROX_CBD                 -17410.4      628.5 -27.702  < 2e-16 ***\n   PROX_ELDERLYCARE         -11939.2     3044.4  -3.922 9.40e-05 ***\n   PROX_HAWKER              -21558.4     4042.8  -5.333 1.20e-07 ***\n   PROX_MRT                 -33141.1     5495.1  -6.031 2.30e-09 ***\n   PROX_PARK                 -2821.7     4581.2  -0.616  0.53808    \n   PROX_MALL                -11835.3     6555.4  -1.805  0.07131 .  \n   PROX_SUPERMARKET         -41997.3    12809.0  -3.279  0.00108 ** \n   WITHIN_350M_KINDERGARTEN   7445.3     1893.0   3.933 8.98e-05 ***\n   WITHIN_350M_CHILDCARE     -4931.9     1152.1  -4.281 2.04e-05 ***\n   WITHIN_350M_BUS             975.2      721.7   1.351  0.17694    \n   WITHIN_1KM_PRISCH         -8695.6     1573.3  -5.527 4.17e-08 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 60410 on 985 degrees of freedom\n   Multiple R-squared: 0.7672\n   Adjusted R-squared: 0.7639 \n   F-statistic: 231.9 on 14 and 985 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.594917e+12\n   Sigma(hat): 60017.68\n   AIC:  24872.66\n   AICc:  24873.22\n   BIC:  24061.71\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 20 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -2684500.90  -150321.15    89559.73   239284.52\n   floor_area_sqm             -10630.59     1099.19     1760.58     2872.21\n   storey_order                  396.49     8656.92    11674.44    13816.69\n   remaining_lease_mths          126.76      331.86      380.39      491.56\n   PROX_CBD                   -71414.17   -24122.89   -11376.61      551.02\n   PROX_ELDERLYCARE          -209084.14   -28395.63    -9621.81     7423.84\n   PROX_HAWKER               -192815.25   -30688.20   -11347.12    12223.10\n   PROX_MRT                  -236259.02   -75696.58   -43184.39   -17545.73\n   PROX_PARK                 -479452.95   -46157.01   -20849.07     2884.50\n   PROX_MALL                 -636761.90   -37287.95   -12074.23    25265.19\n   PROX_SUPERMARKET          -253793.62   -84624.70   -31613.81    18305.09\n   WITHIN_350M_KINDERGARTEN   -84164.58    -6929.81    -2422.34     2581.33\n   WITHIN_350M_CHILDCARE       -9717.45    -2402.61     -333.71     2535.00\n   WITHIN_350M_BUS             -9383.18    -2662.53     -675.27     1461.71\n   WITHIN_1KM_PRISCH          -59358.78   -10351.99    -1622.47     3173.02\n                                 Max.\n   Intercept                935344.96\n   floor_area_sqm             9151.29\n   storey_order              18598.07\n   remaining_lease_mths        771.63\n   PROX_CBD                 161615.33\n   PROX_ELDERLYCARE         164865.10\n   PROX_HAWKER              498987.97\n   PROX_MRT                 492617.74\n   PROX_PARK                369564.30\n   PROX_MALL                171394.14\n   PROX_SUPERMARKET         107079.07\n   WITHIN_350M_KINDERGARTEN  28098.96\n   WITHIN_350M_CHILDCARE     46035.45\n   WITHIN_350M_BUS           10000.01\n   WITHIN_1KM_PRISCH         19989.63\n   ************************Diagnostic information*************************\n   Number of data points: 1000 \n   Effective number of parameters (2trace(S) - trace(S'S)): 408.9022 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 591.0978 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 24015.39 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 23332.37 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 24318.86 \n   Residual sum of squares: 568347760461 \n   R-square value:  0.9632022 \n   Adjusted R-square value:  0.9377036 \n\n   ***********************************************************************\n   Program stops at: 2024-11-11 19:50:19.856424 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, data=train_data, predictdata = test_data, bw=20, kernel=\"gaussian\", adaptive = TRUE, longlat = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-11 19:50:19.881338 \n   Call:\n   gwr.predict(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data, predictdata = test_data, bw = 20, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable for prediction:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 1000\n   ***********************************************************************\n   *     Results of Geographically Weighted Regression for prediction    *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 20 (number of nearest neighbours)\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                        Min.     1st Qu.      Median\n   Intercept_coef                -2298878.46  -177595.71    92576.30\n   floor_area_sqm_coef             -10292.20     1178.13     1739.15\n   storey_order_coef                 1598.29     9257.23    12130.56\n   remaining_lease_mths_coef          151.62      331.20      377.21\n   PROX_CBD_coef                   -73094.96   -22127.45   -10032.67\n   PROX_ELDERLYCARE_coef          -211477.13   -27485.09    -9887.71\n   PROX_HAWKER_coef               -146723.56   -28622.01   -11492.56\n   PROX_MRT_coef                  -236201.13   -76967.91   -42233.89\n   PROX_PARK_coef                 -477205.97   -46657.25   -25616.55\n   PROX_MALL_coef                 -200500.52   -33908.73   -11918.91\n   PROX_SUPERMARKET_coef          -255065.59   -72575.58   -19488.60\n   WITHIN_350M_KINDERGARTEN_coef   -83698.28    -6849.16    -2557.89\n   WITHIN_350M_CHILDCARE_coef       -9622.20    -2726.27     -699.74\n   WITHIN_350M_BUS_coef             -8629.20    -2373.53     -510.58\n   WITHIN_1KM_PRISCH_coef          -35700.37    -7321.99     -401.57\n                                     3rd Qu.      Max.\n   Intercept_coef                  227313.34 941611.12\n   floor_area_sqm_coef               2795.60   9059.74\n   storey_order_coef                14343.74  18887.46\n   remaining_lease_mths_coef          449.20    684.69\n   PROX_CBD_coef                     1873.95 137073.80\n   PROX_ELDERLYCARE_coef             3533.04 159354.46\n   PROX_HAWKER_coef                  9461.45 496437.30\n   PROX_MRT_coef                   -20314.84 135186.28\n   PROX_PARK_coef                     791.59 144881.43\n   PROX_MALL_coef                   29378.06 135053.53\n   PROX_SUPERMARKET_coef            31020.14 107311.26\n   WITHIN_350M_KINDERGARTEN_coef     2588.90  19348.78\n   WITHIN_350M_CHILDCARE_coef        2341.68  16379.54\n   WITHIN_350M_BUS_coef              1610.22  10007.42\n   WITHIN_1KM_PRISCH_coef            4315.81  16992.18\n\n   ****************       Results of GW prediction       ******************\n                        Min.    1st Qu.     Median    3rd Qu.       Max.\n   prediction         259010     362609     410553     474165     960121\n   prediction_var 1003108756 1142560670 1212448509 1307237904 2821535606\n\n   ***********************************************************************\n   Program stops at: 2024-11-11 19:50:30.947156 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_df <- as.data.frame(gwr_pred$SDF$prediction) %>%\n  rename(gwr_pred = \"gwr_pred$SDF$prediction\")\ngwr_pred_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    gwr_pred\n1   305822.0\n2   348966.7\n3   316793.7\n4   308786.7\n5   482119.8\n6   777488.9\n7   518490.3\n8   338509.4\n9   362241.7\n10  444733.0\n11  479055.9\n12  427406.2\n13  410329.4\n14  535320.4\n15  391854.4\n16  387589.0\n17  600293.1\n18  346036.3\n19  363070.5\n20  451673.5\n21  493176.7\n22  454014.2\n23  520137.0\n24  366220.3\n25  430304.2\n26  378616.9\n27  403755.8\n28  390892.8\n29  360832.2\n30  298342.4\n31  395925.6\n32  435784.2\n33  489869.9\n34  393236.8\n35  344508.5\n36  542914.5\n37  396848.7\n38  456709.5\n39  408966.8\n40  442462.6\n41  608603.3\n42  401187.5\n43  410997.5\n44  338164.0\n45  441913.8\n46  518728.8\n47  418079.0\n48  323205.0\n49  662608.1\n50  418448.8\n51  343574.6\n52  383250.0\n53  395706.3\n54  292868.8\n55  461935.7\n56  467132.3\n57  476031.4\n58  725880.0\n59  776313.8\n60  422913.7\n61  482298.4\n62  420111.3\n63  480902.2\n64  418919.7\n65  386421.5\n66  316640.0\n67  363319.2\n68  340471.3\n69  559284.7\n70  425822.0\n71  502195.0\n72  532888.1\n73  339733.8\n74  450713.5\n75  356282.8\n76  514581.4\n77  369219.1\n78  434350.2\n79  411710.3\n80  403103.5\n81  440053.2\n82  808502.3\n83  346964.2\n84  487371.0\n85  407805.6\n86  484494.2\n87  382687.8\n88  327321.7\n89  482124.5\n90  434371.9\n91  264428.8\n92  715148.9\n93  731132.0\n94  432787.4\n95  497309.7\n96  321340.7\n97  348424.6\n98  583668.7\n99  486705.9\n100 446989.1\n101 453887.8\n102 440682.3\n103 395690.1\n104 532838.1\n105 434731.1\n106 430893.4\n107 435352.2\n108 518520.5\n109 416199.1\n110 392033.8\n111 420257.1\n112 288704.9\n113 356472.2\n114 458569.4\n115 414059.8\n116 391049.1\n117 446594.2\n118 347816.7\n119 414563.1\n120 360777.5\n121 397233.2\n122 409567.5\n123 460153.6\n124 512106.1\n125 494460.8\n126 392499.4\n127 266290.6\n128 801077.5\n129 400085.3\n130 441667.8\n131 351348.3\n132 392436.3\n133 434128.6\n134 324781.9\n135 387362.0\n136 320424.1\n137 614319.4\n138 451079.0\n139 538885.2\n140 725975.7\n141 912306.2\n142 354528.8\n143 397927.8\n144 414300.7\n145 528858.1\n146 430855.5\n147 345391.8\n148 422010.3\n149 343160.0\n150 310403.1\n151 268280.4\n152 539338.2\n153 336623.5\n154 479719.8\n155 484213.6\n156 354869.9\n157 482272.1\n158 338446.1\n159 398464.5\n160 300144.2\n161 621294.7\n162 362302.8\n163 450014.1\n164 333799.3\n165 326060.6\n166 388986.2\n167 436045.5\n168 337057.3\n169 324569.0\n170 318904.3\n171 489461.4\n172 520416.6\n173 406066.5\n174 320905.5\n175 304731.4\n176 451731.2\n177 524565.6\n178 337420.0\n179 302237.3\n180 345094.5\n181 395964.2\n182 384313.1\n183 333433.9\n184 545396.7\n185 398348.5\n186 468625.2\n187 260783.2\n188 634874.9\n189 328019.2\n190 402789.7\n191 439423.8\n192 327813.8\n193 315948.8\n194 412768.8\n195 356977.0\n196 294699.1\n197 729089.3\n198 398661.5\n199 541164.7\n200 369707.0\n201 411583.4\n202 346325.9\n203 388766.2\n204 546885.8\n205 310847.4\n206 464712.1\n207 353977.9\n208 427061.7\n209 368141.6\n210 510387.3\n211 362711.4\n212 485024.0\n213 424459.8\n214 376527.8\n215 341778.4\n216 421942.7\n217 290040.7\n218 345689.4\n219 289459.7\n220 307132.5\n221 307880.1\n222 744830.4\n223 391896.6\n224 350041.7\n225 406230.5\n226 463009.4\n227 467919.7\n228 354801.4\n229 422409.2\n230 390214.9\n231 585944.0\n232 310206.1\n233 512632.5\n234 423845.6\n235 464726.8\n236 389737.4\n237 302289.8\n238 411517.2\n239 319955.2\n240 425553.4\n241 390124.0\n242 440765.6\n243 374704.8\n244 443616.0\n245 322926.2\n246 360162.8\n247 357834.8\n248 368609.8\n249 424225.1\n250 462042.0\n251 429991.6\n252 402265.9\n253 512402.5\n254 784852.0\n255 394618.1\n256 526743.5\n257 423849.5\n258 513267.4\n259 451962.8\n260 620801.4\n261 497956.5\n262 331840.4\n263 526185.2\n264 443143.9\n265 386614.6\n266 316041.2\n267 492551.3\n268 383442.1\n269 443127.8\n270 371798.8\n271 379443.2\n272 314928.9\n273 342546.1\n274 441534.3\n275 350066.9\n276 622597.7\n277 557301.5\n278 418472.5\n279 487554.8\n280 420608.1\n281 490009.6\n282 419438.1\n283 617098.5\n284 494418.2\n285 441268.0\n286 510102.3\n287 416772.6\n288 358637.0\n289 450639.7\n290 530203.2\n291 407040.9\n292 430276.2\n293 515199.2\n294 352880.0\n295 380171.6\n296 421753.6\n297 374583.3\n298 408865.4\n299 417114.5\n300 393407.0\n301 355894.2\n302 425813.9\n303 441616.3\n304 400912.9\n305 704094.0\n306 454626.7\n307 378686.7\n308 410777.5\n309 475976.0\n310 424507.2\n311 360277.6\n312 405018.2\n313 441936.5\n314 402058.0\n315 589343.6\n316 359798.8\n317 636962.5\n318 404104.3\n319 664899.2\n320 325122.5\n321 455806.3\n322 415133.0\n323 447070.2\n324 375330.6\n325 441024.5\n326 412798.8\n327 435176.8\n328 383502.5\n329 596240.2\n330 336757.8\n331 360061.0\n332 437145.3\n333 358525.6\n334 282085.8\n335 377678.5\n336 384022.1\n337 491607.3\n338 507031.1\n339 456352.4\n340 317399.1\n341 451494.5\n342 423307.4\n343 482920.8\n344 394395.6\n345 911337.1\n346 530065.6\n347 379539.2\n348 440815.2\n349 360048.5\n350 372642.8\n351 337726.6\n352 432069.9\n353 638138.3\n354 416664.0\n355 374506.6\n356 407159.4\n357 557981.7\n358 405603.2\n359 319093.5\n360 502998.9\n361 797438.0\n362 348961.1\n363 499312.8\n364 402491.7\n365 403038.5\n366 475274.8\n367 392127.3\n368 350708.1\n369 399111.7\n370 304415.8\n371 574421.8\n372 382910.6\n373 310074.6\n374 349014.1\n375 417482.8\n376 487232.0\n377 389796.8\n378 343125.9\n379 444781.8\n380 409637.8\n381 411370.4\n382 348851.7\n383 382915.9\n384 671577.4\n385 303746.7\n386 446920.7\n387 458970.6\n388 377494.9\n389 405383.3\n390 382027.8\n391 369835.4\n392 473986.8\n393 422504.6\n394 700862.0\n395 432747.1\n396 342425.8\n397 325024.3\n398 384497.5\n399 485993.5\n400 409618.8\n401 370616.2\n402 286438.0\n403 396347.7\n404 503808.5\n405 441116.2\n406 308579.0\n407 300163.8\n408 325745.2\n409 395001.4\n410 401158.7\n411 464384.4\n412 259010.2\n413 311409.3\n414 388649.2\n415 383014.1\n416 419585.4\n417 428213.7\n418 349499.4\n419 263673.3\n420 474697.8\n421 574040.8\n422 564560.9\n423 441399.4\n424 380464.9\n425 406886.5\n426 460770.1\n427 412526.4\n428 409984.1\n429 672838.3\n430 377316.5\n431 344140.6\n432 883920.4\n433 539483.8\n434 960121.3\n435 744281.9\n436 377178.1\n437 329870.1\n438 383307.7\n439 336084.3\n440 801545.0\n441 488770.9\n442 443355.1\n443 560214.2\n444 452274.7\n445 411297.1\n446 397818.3\n447 364697.2\n448 333267.7\n449 372241.0\n450 280215.1\n451 446360.0\n452 394741.6\n453 288778.6\n454 390248.4\n455 390072.2\n456 432162.2\n457 384662.6\n458 491291.9\n459 756490.7\n460 400443.8\n461 466023.3\n462 357699.8\n463 399713.7\n464 305684.5\n465 394404.9\n466 390572.6\n467 308448.0\n468 658285.8\n469 416321.1\n470 830359.1\n471 533668.5\n472 400829.9\n473 634447.4\n474 369315.9\n475 524344.1\n476 634684.8\n477 357183.8\n478 580957.0\n479 550326.8\n480 379621.6\n481 629390.2\n482 499333.3\n483 355438.2\n484 522285.8\n485 405452.1\n486 410020.5\n487 338860.5\n488 399189.8\n489 436244.3\n490 303871.6\n491 397037.9\n492 557967.0\n493 549002.5\n494 468112.2\n495 418342.4\n496 374933.9\n497 408048.0\n498 404211.0\n499 377375.6\n500 430602.3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(HDB_sample)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\ntrain_data_nogeom <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm +\n              storey_order + remaining_lease_mths +\n              PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n              PROX_MRT + PROX_PARK + PROX_MALL + \n              PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n              WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n              WITHIN_1KM_PRISCH,\n            data=train_data_nogeom)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predict(rf, data = test_data_nogeom)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>%\n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_ad <- grf(formula = resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                dframe=train_data_nogeom,\n                bw=20,\n                kernel=\"adaptive\",\n                coords=coords_train)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#write_rds(grf_ad, \"data/model/grf_ad.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_ad <- read_rds(\"data/model/grf_ad.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- predict.grf(grf_ad,\n                        test_data_nogeom,\n                        x.var.name=\"X\",\n                        y.var.name=\"Y\",\n                        local.w=1,\n                        global.w=0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_pred <- test_data %>%\n  dplyr::select(resale_price) %>%\n  cbind(gwr_pred_df) %>% \n  cbind(rf_pred_df) %>%\n  cbind(grf_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_data_pred %>%\n  st_drop_geometry() %>%\n  pivot_longer(cols = ends_with(\"pred\"),\n               names_to = \"model\",\n               values_to = \"predicted\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_labels <- c(gwr_pred = \"gwr\", rf_pred = \"Random Forest\", grf_pred = \"gwRF\")\n\ntest_longer <- test_longer %>% mutate(model = recode(model, !!!model_labels))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_results <- test_longer %>% \n  group_by(model) %>%\n  rmse(truth = resale_price,\n        estimate = predicted) %>%\n  rename(rmse = .estimate) %>%\n  select(model, rmse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rmse_results,\n       aes(x = reorder(model,rmse), y = rmse, fill = \"skyblue\")) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\", color = \"black\", width = 0.7) +\n  labs(title = \"RMSE Comparison of Model\",\n       y = \"RMSE\",\n       x = \"Model\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ic_ex13_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_longer %>%\n  left_join(rmse_results, by = \"model\")\n\nggplot(data=test_longer,\n        aes(x = predicted,\n            y = resale_price)) +\n        facet_wrap(~ model) +\n        geom_point() +\n        geom_text(data=test_longer, \n                  aes(x=Inf, y=Inf,\n                    label=paste(\"RMSE: \", round(rmse, 2))),\n                  hjust = 1.1, vjust = 1.1,\n                  color=\"black\", size=4)\n```\n\n::: {.cell-output-display}\n![](ic_ex13_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_imp <- data.frame(\n  Variable = names(grf_ad$Global.Model$variable.importance),\n  Importance = grf_ad$Global.Model$variable.importance\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(var_imp, aes(x = reorder(Variable,Importance), y = Importance)) +\ngeom_bar(stat = \"identity\", fill = \"skyblue\") +\ncoord_flip() +\nlabs(\n  title = \"Variable Importance from Ranger Rodel\",\n  x = \"Variables\",\n  y = \"Importance\") + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ic_ex13_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "ic_ex13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}