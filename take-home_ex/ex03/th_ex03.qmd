---
title: "Take-home Exercise 3"
author: "Jeffery Lau"
date: 10-13-2024
date-modified: "last-modified"
description: |
  In this exercise, we will be looking prototyping for my team's Geospatial Analytics Shiny Application. I am responsible for 
categories:
  - Take-home
format:
  html:
    toc: true
execute: 
  eval: true
  echo: true
  warning: false
  freeze: false
---

# 1. Introduction

## 1.1 Responsibility

## 1.2 Motivation

## 1.3 Objectives


# 2. Packages and Data

## 2.1 Packages Required

```{r}
pacman::p_load(sf, st, tidyverse, raster, tmap, tmaptools, ggplot2, spatstat, sfdep, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

## 2.2 Data Required

There are two datasets being used in this exercise.

-   [Malaysia – Crime by District and Crime Type](https://data.gov.my/data-catalogue/crime_district) from data.gov.my in csv format.

-   [Malaysia - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-mys) with included administrative regions in shapefile format.

-   [Malaysia – Annual Principal Labour Force Statistics by District](https://data.gov.my/data-catalogue/lfs_district) from data.gov.my in csv format.

-   [Malaysia – Household Income and Expenditure: Administrative Districts](https://data.gov.my/data-catalogue/hies_district) from data.gov.my in csv format.

-   [Malaysia – Enrolment in Government Schools by District](https://data.gov.my/data-catalogue/enrolment_school_district) from data.gov.my in csv format.

-   [Malaysia – Enrolment in Government Schools by District](https://data.gov.my/data-catalogue/enrolment_school_district) from data.gov.my in csv format.

We first import the crime rate csv file into R.

```{r}
crime_df <- read_csv("data/aspatial/crime_district.csv")
population_df <- read_csv("data/aspatial/population_district.csv")
```

Next, we import the administrative regions of Malaysia.

```{r}
mys_sf <- read_sf(dsn = "data/geospatial/mys_adm_unhcr_20210211_shp", 
                 layer = "mys_admbnda_adm2_unhcr_20210211") %>%
          st_transform(crs = 3168)
```


## 2.3 Wrangling

### 2.3.1 Data Preparation

```{r}
print("Unique states in crime_df:")
unique(crime_df$state)

print("Unique states in population_df:")
unique(crime_df$state)

print("Unique states in mys_sf:")
unique(mys_sf$ADM1_EN)
```

Convert state and district to upper for matching

```{r}
crime_df <- crime_df %>%
              mutate(year = year(date),
                     state = toupper(state),
                     district = toupper(district))
crime_df
```

```{r}
population_df <- population_df %>%
              mutate(year = year(date),
                     state = toupper(state),
                     district = toupper(district))
population_df
```

```{r}
mys_sf <- mys_sf %>%
          mutate(ADM1_EN = toupper(ADM1_EN),
                 ADM2_EN = toupper(ADM2_EN))

mys_sf
```

### 2.3.2 Checking for Mismatch (State)

```{r}
# Assuming you have two character vectors:
state_crime <- unique(crime_df$state)
state_sf <- unique(mys_sf$ADM1_EN)

# Find states in crime_df that are not in mys_sf
missing_in_sf <- setdiff(state_crime, state_sf)

# Find states in mys_sf that are not in crime_df
missing_in_crime <- setdiff(state_sf, state_crime)

# Print the mismatches
print("States in crime_df not found in mys_sf:")
print(missing_in_sf)

print("States in mys_sf not found in crime_df:")
print(missing_in_crime)
```

### 2.3.3 Cleaning (State)
However in this case study, for ease of analysis, we choose to focus on West Malaysia, and thus will be filtering out Sarawak, Sabah and Labuan.

```{r}
mys_sf <- mys_sf %>%
          filter(ADM1_EN != 'W.P. LABUAN' & ADM1_EN != 'SABAH' & ADM1_EN != 'SARAWAK') %>%
          mutate(ADM1_EN = replace(ADM1_EN, ADM1_EN == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 ADM1_EN = replace(ADM1_EN, ADM1_EN == 'W.P. PUTRAJAYA', 'KUALA LUMPUR'))

mys_sf
```

```{r}
crime_df <- crime_df %>%
              filter(state != 'MALAYSIA' & state != 'SABAH' & state != 'SARAWAK' & 
                     district != 'ALL' & type != 'all') %>%
              mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'))
crime_df
```

```{r}
population_df <- population_df %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN' &
                 sex == "both" & age == "overall" & ethnicity == "overall" ) %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'KUALA LUMPUR')) %>%
          dplyr::select(state, district, year, population)
population_df
```

### 2.3.4 Crime (State-District) 

#### 2.3.4.1 Check for Mismatch 

```{r}
crime_df <- crime_df %>% mutate(state_district = paste(state, district, sep = "-"))
mys_sf <- mys_sf %>% mutate(state_district = paste(ADM1_EN, ADM2_EN, sep = "-"))
```


```{r}
# Assuming you have two character vectors:
state_district_crime <- unique(crime_df$state_district)
state_district_sf <- unique(mys_sf$state_district)

# Find mismatches
missing_in_sf <- setdiff(state_district_crime, state_district_sf)
missing_in_crime <- setdiff(state_district_sf, state_district_crime)

# Print the mismatches
print("State-District combinations in crime_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in crime_df:")
print(missing_in_crime)
```

#### 2.3.4.2 Cleaning


```{r}
crime_df <- crime_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district %in% c("ISKANDAR PUTERI", "NUSAJAYA", "JOHOR BAHRU SELATAN", "JOHOR BAHRU UTARA", "SERI ALAM") ~ "JOHOR BAHRU",
    state == "NEGERI SEMBILAN" & district == "NILAI" ~ "SEREMBAN",
    state == "KEDAH" & district == "BANDAR BHARU" ~ "BANDAR BAHARU",
    state == "PAHANG" & district == "CAMERON HIGHLAND" ~ "CAMERON HIGHLANDS",
    state == "PAHANG" & district == "KUALA LIPIS" ~ "LIPIS",
    state == "PERAK" & district  %in% c("BATU GAJAH", "IPOH") ~ "KINTA",
    state == "PERAK" & district == "GERIK" ~ "ULU PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "PENGKALAN HULU" ~ "ULU PERAK",
    state == "PERAK" & district %in% c("SELAMA", "TAIPING") ~ "LARUT DAN MATANG",
    state == "PERAK" & district == "SUNGAI SIPUT" ~ "KUALA KANGSAR",
    state == "PERAK" & district %in% c("TANJONG MALIM", "TAPAH") ~ "BATANG PADANG",
    state == "PERLIS" & district %in% c("ARAU", "KANGAR", "PADANG BESAR") ~ "PERLIS",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "SELANGOR" & district == "AMPANG JAYA" ~ "GOMBAK",
    state == "SELANGOR" & district == "HULU SELANGOR" ~ "ULU SELANGOR",
    state == "SELANGOR" & district == "KAJANG" ~ "ULU LANGAT",
    state == "SELANGOR" & district %in% c("KLANG SELATAN", "KLANG UTARA") ~ "KLANG",
    state == "SELANGOR" & district %in% c("PETALING JAYA", "SERDANG", "SG. BULOH", "SHAH ALAM", "SUBANG JAYA", "SUNGAI BULOH") ~ "PETALING",
    state == "KUALA LUMPUR" & district %in% c("BRICKFIELDS", "CHERAS", "DANG WANGI", "SENTUL", "WANGSA MAJU") ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year, category, type) %>%
  summarise(crimes = sum(crimes))
```

```{r}
tm_shape(mys_sf) +
  tm_polygons() +
  tm_text("ADM2_EN", size = 0.3)
```

#### 2.3.4.3 Visualizing Crime Distribution

```{r}
crime_df_mys <- crime_df %>%
  filter(year >= 2019 & year <= 2022) %>%
  left_join(mys_sf, by = c("state" = "ADM1_EN", "district" = "ADM2_EN")) %>%
  dplyr::select(state, district, year, category, type, crimes, geometry)

crime_df_mys <- st_as_sf(crime_df_mys)
crime_df_mys
```

```{r}
tmap_mode("plot")

crime_df_mys_grp <- crime_df_mys %>%
  group_by(state, district) %>%
  summarize(total_crimes = sum(crimes))

choro <- tm_shape(crime_df_mys_grp) +
  tm_fill("total_crimes", 
          style = "pretty", 
          palette = "Blues",
          title = "Crimes") +
  tm_layout(main.title = "Distribution of crime in West Malaysia",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2)

choro
```

### 2.3.5 Population (State-District)

#### 2.3.5.1 Check for Mismatch

The year 2019 is missing from data set, hence we will map year 2020 -> 2019.

```{r}
population_row <- population_df %>%
  filter(year == 2020) %>%
  mutate(year = 2019) 
population_df <- bind_rows(population_df, population_row)
unique(population_df$year)
```

```{r}
population_df <- population_df %>% mutate(state_district = paste(state, district, sep = "-"))
```

```{r}
# Assuming you have two character vectors:
state_district_population <- unique(population_df$state_district)

# Find mismatches
missing_in_sf <- setdiff(state_district_population, state_district_sf)
missing_in_population <- setdiff(state_district_sf, state_district_population)

# Print the mismatches
print("State-District combinations in population_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in population_df:")
print(missing_in_population)
```

#### 2.3.5.2 Cleaning

```{r}
population_df <- population_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    state == "KELANTAN" & district == "KECIL LOJING" ~ "GUA MUSANG",
    state == "PAHANG" & district == "CAMERON HIGHLAND" ~ "CAMERON HIGHLANDS",
    state == "PERAK" & district == "HULU PERAK" ~ "ULU PERAK",
    state == "PERAK" & district == "BAGAN DATUK" ~ "HILIR PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "MUALLIM" ~ "BATANG PADANG",
    state == "PERAK" & district == "SELAMA" ~ "LARUT DAN MATANG",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "PULAU PINANG" & district == "SP SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SP TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SP UTARA" ~ "S.P. UTARA",
    state == "KUALA LUMPUR" & district == "W.P. KUALA LUMPUR" ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year) %>%
  summarise(population = sum(population))

population_df
```

```{r}
tm_shape(mys_sf) +
  tm_polygons() +
  tm_text("ADM2_EN", size = 0.3)
```

### 2.3.6 Joining

#### 2.3.6.1 Join with Population Data

```{r}
crime_df_mys <- crime_df %>% 
  filter(year >= 2019 & year <= 2022) %>%
  left_join(population_df, by = c("state", "district", "year")) %>%
  mutate(crimes_pc = crimes/population) %>%
  dplyr::select(state, district, year, category, type, crimes, crimes_pc, population)
```

#### 2.3.6.2 Create for Pokok Sena District 

```{r}
pokok_sena_rows <- crime_df_mys %>%
  filter(state == "KEDAH") %>%
  group_by(state, year, category, type) %>%
  summarise(crimes = mean(crimes),
            crimes_pc = mean(crimes_pc),
            population = mean(population)) %>% 
  mutate(district = "POKOK SENA")

pokok_sena_rows
crime_df_mys <- bind_rows(crime_df_mys, pokok_sena_rows)
```

#### 2.3.6.3 Join with District Boundary 

```{r}
crime_df_mys <- crime_df_mys %>%
  left_join(mys_sf, by = c("state" = "ADM1_EN", "district" = "ADM2_EN")) %>%
  dplyr::select(state, district, year, category, type, crimes, crimes_pc, population, geometry)

crime_df_mys <- st_as_sf(crime_df_mys)
crime_df_mys
```

### 2.3.7 Visualizing the distribution of crime

```{r}
tmap_mode("plot")

crime_df_mys_grp <- crime_df_mys %>%
  group_by(state, district) %>%
  summarize(total_crimes_pc = sum(crimes_pc)/4)

choro <- tm_shape(crime_df_mys_grp) +
  tm_fill("total_crimes_pc", 
          style = "pretty", 
          palette = "Blues",
          title = "Crimes") +
  tm_layout(main.title = "Distribution of crime in West Malaysia",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2)

choro
```

### 2.3.8 Data Enrichment

```{r}
piv_crime_df_mys <- crime_df_mys %>%
  mutate(cat_type = paste(category, type, sep = "-")) %>%
  select(-category, -type, -crimes, -population) %>%
  pivot_wider(
    names_from = cat_type,
    values_from = crimes_pc,
    values_fill = 0
  ) 

corrplot.mixed(cor(st_drop_geometry(piv_crime_df_mys)[, 4:15]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45, 
               tl.cex = 0.5)
```

To further narrow our correlation analysis we will group robbery as one category and vehicle theft as the other

```{r}
piv_crime_df_mys <- piv_crime_df_mys %>%
  mutate(
    robbery = `assault-robbery_gang_armed` + `assault-robbery_gang_unarmed` + 
              `assault-robbery_solo_armed` + `assault-robbery_solo_unarmed`,
    vehicle_theft = `property-theft_vehicle_lorry` + `property-theft_vehicle_motorcar` + 
                    `property-theft_vehicle_motorcycle`
  ) %>%
  select(-`assault-robbery_gang_armed`, -`assault-robbery_gang_unarmed`, 
         -`assault-robbery_solo_armed`, -`assault-robbery_solo_unarmed`,
         -`property-theft_vehicle_lorry`, -`property-theft_vehicle_motorcar`, 
         -`property-theft_vehicle_motorcycle`) %>%
  rename_with(~str_remove(., "^assault-|^property-"))

piv_crime_df_mys
```

```{r}
corrplot.mixed(cor(st_drop_geometry(piv_crime_df_mys)[, 4:10]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45, 
               tl.cex = 0.5)
```

## 2.4 Data Enrichment

We realize we ran into some issue with the dataset, as they were too highly correlated, hence we decided enrich our data with several more relevant datasets which may affect crime rates such enrollment in schools, labour participation, and poverty by district

```{r}
enrol_df <- read_csv("data/aspatial/enrolment_district.csv")
hies_df <- read_csv("data/aspatial/hies_district.csv")
poverty_df <- read_csv("data/aspatial/poverty_district.csv")
inequality_df <- read_csv("data/aspatial/inequality_district.csv")
labour_df <- read_csv("data/aspatial/labour_district.csv")
population_df <- read_csv("data/aspatial/population_district.csv")
```

```{r}
print("Unique states in mys_sf:")
unique(mys_sf$ADM1_EN)

print("Unique states in poverty_df:")
unique(poverty_df$state)

print("Unique states in inequality_df:")
unique(inequality_df$state)

print("Unique states in labour_df:")
unique(labour_df$state)

print("Unique states in population_df:")
unique(population_df$state)
```

### 2.4.1 Wrangling (State)

#### 2.4.1.1 Initial Mapping

```{r}
poverty_df <- poverty_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN' & district != 'ALL') %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'SELANGOR'))
```

```{r}
inequality_df <- inequality_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN' & district != 'ALL') %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'SELANGOR'))
```

```{r}
labour_df <- labour_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & district != 'ALL')
```

```{r}
population_df <- population_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN' & district != 'ALL') %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'SELANGOR'))
```


```{r}
print("Unique states & years in mys_sf:")
sort(unique(mys_sf$ADM1_EN))

print("Unique states & years in poverty_df:")
sort(unique(poverty_df$state))
sort(unique(poverty_df$date))

print("Unique states & years in inequality_df:")
sort(unique(inequality_df$state))
sort(unique(inequality_df$date))

print("Unique states & years in labour_df:")
sort(unique(labour_df$state))
sort(unique(labour_df$date))
```

```{r}
print("Unique states & years in population_df:")
sort(unique(population_df$state))
sort(unique(population_df$date))
```


From the data we identified 2 issues:
1.    Poverty and Inequality data is missing years 2020 and 2021
2.    Labour data is missing PERLIS and KUALA LUMPUR
3.    Population data is missing year 2019

#### 2.4.1.2 Additional Mapping (Poverty and Inequality)

Since years 2020 and 2021 are missing from data set, we will do a best effort mapping for year:
-   2020 -> 2019
-   2021 -> 2022

```{r}
poverty_rows <- poverty_df %>%
  mutate(year = ifelse(year == 2019, 2020, 2021))
poverty_df <- bind_rows(poverty_df, poverty_rows)
unique(poverty_df$year)
```

```{r}
inequality_rows <- inequality_df %>%
  mutate(year = ifelse(year == 2019, 2020, 2021))
inequality_df <- bind_rows(inequality_df, inequality_rows)
unique(inequality_df$year)
```

#### 2.4.1.3 Additional Mapping (Labour)

Since our analysis for now will be centered around Southern Malaysia we will omit mapping of PERLIS and KUALA LUMPUR
 
#### 2.4.1.4 Additional Mapping (Population)

Similarly the year 2019 is missing from data set, hence we will map year 2020 -> 2019.

```{r}
population_row <- population_df %>%
  filter(year == 2020) %>%
  mutate(year = 2019) 
population_df <- bind_rows(population_df, population_row)
unique(population_df$year)
```

### 2.4.2 Wrangling Poverty & Inequaltiy

```{r}
poverty_df <- poverty_df %>% mutate(state_district = paste(state, district, sep = "-"))
inequality_df <- inequality_df %>% mutate(state_district = paste(state, district, sep = "-"))
population_df <- population_df %>% mutate(state_district = paste(state, district, sep = "-"))
```


```{r}
# Assuming you have two character vectors:
state_district_poverty <- unique(poverty_df$state_district)

# Find mismatches
missing_in_sf <- setdiff(state_district_poverty, state_district_sf)
missing_in_poverty <- setdiff(state_district_sf, state_district_poverty)

# Print the mismatches
print("State-District combinations in poverty_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in poverty_df:")
print(missing_in_poverty)
```

JOHOR
1.    KULAI -> KULAIJAYA
2.    TANGKAK -> LEDANG

NEGERI SEMBILAN
1.    OK

MELAKA
1.    OK

```{r}
poverty_df <- poverty_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    TRUE ~ district
  )) 

poverty_df
```
```{r}
inequality_df <- inequality_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    TRUE ~ district
  )) 

inequality_df
```

### 2.4.2 Wrangling Labour

```{r}
labour_df <- labour_df %>% mutate(state_district = paste(state, district, sep = "-"))
```


```{r}
# Assuming you have two character vectors:
state_district_labour <- unique(labour_df$state_district)

# Find mismatches
missing_in_sf <- setdiff(state_district_labour, state_district_sf)
missing_in_labour <- setdiff(state_district_sf, state_district_labour)

# Print the mismatches
print("State-District combinations in labour_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in labour_df:")
print(missing_in_labour)
```

```{r}
labour_df <- labour_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    TRUE ~ district
  )) 

labour_df
```

### 2.4.3 Wrangling Population
```{r}
# Assuming you have two character vectors:
state_district_population <- unique(population_df$state_district)

# Find mismatches
missing_in_sf <- setdiff(state_district_population, state_district_sf)
missing_in_population <- setdiff(state_district_sf, state_district_population)

# Print the mismatches
print("State-District combinations in population_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in population_df:")
print(missing_in_population)
```

```{r}
population_df <- population_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    TRUE ~ district
  )) 

population_df
```


### 2.4.4 Joining

### 2.4.4.1 Selecting Relevant Years

```{r}
piv_crime_df_mys <- piv_crime_df_mys %>%
    filter(year >= 2019 & year <= 2022)
```

```{r}
population_df <- population_df %>%
    filter(sex == "both" & age == "overall" & ethnicity == "overall") %>%
    dplyr::select(state, district, year, population)
population_df
```


### 2.4.4.2 Selecting Relevant Years

```{r}
piv_full_df_mys <- piv_crime_df_mys %>%
  left_join(select(poverty_df, -date, -state_district), by = c("state", "district", "year")) %>%
  left_join(select(inequality_df, -date, -state_district), by = c("state", "district", "year")) %>%
  left_join(select(labour_df, -date, -state_district), by = c("state", "district", "year")) %>%
  left_join(population_df, by = c("state", "district", "year"))

piv_full_df_mys
```

### 2.4.4.3 Normalising Crime by Population

We need to transform 

```{r}
piv_full_df_mys <- piv_full_df_mys %>%
    mutate(assault_pc = assault/population,
           property_pc = property/population) %>%
piv_full_df_mys
```


### 2.4.4.4 Visualizing the Correlation of Data

```{r}
corrplot.mixed(cor(st_drop_geometry(piv_full_df_mys)[, 4:18]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45,  # Slant the labels by 45 degrees
               tl.cex = 0.5)
```


# 3. Analysis

## 3.1 Exploratory Data Analysis (EDA)

## 3.1.1 Coorelation Plot

# 4. UI Design

## 4.1 Story Board

### 4.1.1 Prameters

### 4.1.2 Outputs

## 4.2 Layout

(Story Board)\[https://giniceseah.netlify.app/posts/2021-07-31-storyboard/\]

# 5. Reflection
