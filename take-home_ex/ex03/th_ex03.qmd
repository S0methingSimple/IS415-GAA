---
title: "Take-home Exercise 3"
author: "Jeffery Lau"
date: 10-13-2024
date-modified: "last-modified"
description: |
  In this exercise, we will be looking prototyping for my team's Geospatial Analytics Shiny Application. I am responsible for 
categories:
  - Take-home
format:
  html:
    toc: true
execute: 
  eval: true
  echo: true
  warning: false
  freeze: false
---

# 1. Introduction

## 1.1 Responsibility

## 1.2 Motivation

## 1.3 Objectives

# 2. Packages and Data

## 2.1 Packages Required

```{r}
pacman::p_load(sf, st, tidyverse, raster, tmap, tmaptools, ggplot2, gridExtra, spatstat, sfdep, spdep, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

## 2.2 Data Required

There are two datasets being used in this exercise.

-   [Malaysia – Crime by District and Crime Type](https://data.gov.my/data-catalogue/crime_district) from data.gov.my in csv format.

-   [Malaysia - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-mys) with included administrative regions in shapefile format.

-   [Malaysia – Annual Principal Labour Force Statistics by District](https://data.gov.my/data-catalogue/lfs_district) from data.gov.my in csv format.

-   [Malaysia – Household Income and Expenditure: Administrative Districts](https://data.gov.my/data-catalogue/hies_district) from data.gov.my in csv format.

-   [Malaysia – Enrolment in Government Schools by District](https://data.gov.my/data-catalogue/enrolment_school_district) from data.gov.my in csv format.

-   [Malaysia – Enrolment in Government Schools by District](https://data.gov.my/data-catalogue/enrolment_school_district) from data.gov.my in csv format.

We first import the crime rate csv file into R.

### 2.2.1 Aspatial Data

```{r}
crime_df <- read_csv("data/aspatial/crime_district.csv")
population_df <- read_csv("data/aspatial/population_district.csv")
```

### 2.2.2 Geospatial Data

Next, we import the administrative regions of Malaysia.

```{r}
mys_sf <- read_sf(dsn = "data/geospatial/mys_adm_unhcr_20210211_shp", 
                 layer = "mys_admbnda_adm2_unhcr_20210211") %>%
          st_transform(crs = 3168)
```

### 2.2.3 Enrichment Data

```{r}
poverty_df <- read_csv("data/aspatial/poverty_district.csv")
inequality_df <- read_csv("data/aspatial/inequality_district.csv")
labour_df <- read_csv("data/aspatial/labour_district.csv")
```

## 2.3 Wrangling

### 2.3.1 Data Preparation

::: panel-tabset
#### Crime

Convert state and district to upper for matching

```{r}
crime_df <- crime_df %>%
              mutate(year = year(date),
                     state = toupper(state),
                     district = toupper(district))
crime_df
```

#### Population

```{r}
population_df <- population_df %>%
              mutate(year = year(date),
                     state = toupper(state),
                     district = toupper(district))
population_df
```

#### Malaysia

```{r}
mys_sf <- mys_sf %>%
          mutate(ADM1_EN = toupper(ADM1_EN),
                 ADM2_EN = toupper(ADM2_EN))

mys_sf
```
:::

### 2.3.2 State Mismatch

::: panel-tabset
#### Overview

```{r}
print("Unique states in crime_df:")
unique(crime_df$state)

print("Unique states in population_df:")
unique(population_df$state)

print("Unique states in mys_sf:")
unique(mys_sf$ADM1_EN)
```

#### Difference

```{r}
state_crime <- unique(crime_df$state)
state_sf <- unique(mys_sf$ADM1_EN)

missing_in_sf <- setdiff(state_crime, state_sf)
missing_in_crime <- setdiff(state_sf, state_crime)

print("States in crime_df not found in mys_sf:")
print(missing_in_sf)

print("States in mys_sf not found in crime_df:")
print(missing_in_crime)
```
:::

### 2.3.3 State Wrangling

However in this case study, for ease of analysis, we choose to focus on West Malaysia, and thus will be filtering out Sarawak, Sabah and Labuan.

::: panel-tabset
#### Crime

```{r}
crime_df <- crime_df %>%
              filter(state != 'MALAYSIA' & state != 'SABAH' & state != 'SARAWAK' & 
                     district != 'ALL' & type != 'all') %>%
              mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'))
crime_df
```

#### Population

```{r}
population_df <- population_df %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN' &
                 sex == "both" & age == "overall" & ethnicity == "overall" ) %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'KUALA LUMPUR')) %>%
          dplyr::select(state, district, year, population)
population_df
```

#### Malaysia

```{r}
mys_sf <- mys_sf %>%
          filter(ADM1_EN != 'W.P. LABUAN' & ADM1_EN != 'SABAH' & ADM1_EN != 'SARAWAK') %>%
          mutate(ADM1_EN = replace(ADM1_EN, ADM1_EN == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 ADM1_EN = replace(ADM1_EN, ADM1_EN == 'W.P. PUTRAJAYA', 'KUALA LUMPUR'))

mys_sf
```
:::

### 2.3.4 State-District Wrangling (Crime)

#### 2.3.4.1 State-District Mismatch

```{r}
crime_df <- crime_df %>% mutate(state_district = paste(state, district, sep = "-"))
mys_sf <- mys_sf %>% mutate(state_district = paste(ADM1_EN, ADM2_EN, sep = "-"))
```

```{r}
state_district_crime <- unique(crime_df$state_district)
state_district_sf <- unique(mys_sf$state_district)

missing_in_sf <- setdiff(state_district_crime, state_district_sf)
missing_in_crime <- setdiff(state_district_sf, state_district_crime)

print("State-District combinations in crime_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in crime_df:")
print(missing_in_crime)
```

#### 2.3.4.2 Re-Mapping Districts

```{r}
crime_df <- crime_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district %in% c("ISKANDAR PUTERI", "NUSAJAYA", "JOHOR BAHRU SELATAN", "JOHOR BAHRU UTARA", "SERI ALAM") ~ "JOHOR BAHRU",
    state == "NEGERI SEMBILAN" & district == "NILAI" ~ "SEREMBAN",
    state == "KEDAH" & district == "BANDAR BHARU" ~ "BANDAR BAHARU",
    state == "PAHANG" & district == "CAMERON HIGHLAND" ~ "CAMERON HIGHLANDS",
    state == "PAHANG" & district == "KUALA LIPIS" ~ "LIPIS",
    state == "PERAK" & district  %in% c("BATU GAJAH", "IPOH") ~ "KINTA",
    state == "PERAK" & district == "GERIK" ~ "ULU PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "PENGKALAN HULU" ~ "ULU PERAK",
    state == "PERAK" & district %in% c("SELAMA", "TAIPING") ~ "LARUT DAN MATANG",
    state == "PERAK" & district == "SUNGAI SIPUT" ~ "KUALA KANGSAR",
    state == "PERAK" & district %in% c("TANJONG MALIM", "TAPAH") ~ "BATANG PADANG",
    state == "PERLIS" & district %in% c("ARAU", "KANGAR", "PADANG BESAR") ~ "PERLIS",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "SELANGOR" & district == "AMPANG JAYA" ~ "GOMBAK",
    state == "SELANGOR" & district == "HULU SELANGOR" ~ "ULU SELANGOR",
    state == "SELANGOR" & district == "KAJANG" ~ "ULU LANGAT",
    state == "SELANGOR" & district %in% c("KLANG SELATAN", "KLANG UTARA") ~ "KLANG",
    state == "SELANGOR" & district %in% c("PETALING JAYA", "SERDANG", "SG. BULOH", "SHAH ALAM", "SUBANG JAYA", "SUNGAI BULOH") ~ "PETALING",
    state == "KUALA LUMPUR" & district %in% c("BRICKFIELDS", "CHERAS", "DANG WANGI", "SENTUL", "WANGSA MAJU") ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year, category, type) %>%
  summarise(crimes = sum(crimes))
```

#### 2.3.4.3 Crime Distribution

::: panel-tabset
##### Overview

```{r}
og_crime_df_mys <- crime_df %>%
  filter(year >= 2019 & year <= 2022) %>%
  left_join(mys_sf, by = c("state" = "ADM1_EN", "district" = "ADM2_EN")) %>%
  dplyr::select(state, district, year, category, type, crimes, geometry)

og_crime_df_mys <- st_as_sf(og_crime_df_mys)
og_crime_df_mys
```

##### Visualization

```{r}
og_crime_df_mys_grp <- og_crime_df_mys %>%
  group_by(state, district) %>%
  summarize(total_crimes = sum(crimes)/4)

mys_map <- tm_shape(mys_sf) +
  tm_polygons(col = "lightgray", alpha = 0.3) +
  tm_text("ADM2_EN", size = 0.3) +
  tm_layout(main.title = "Districts (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_grid(alpha =0.2)

choro_map <- tm_shape(og_crime_df_mys_grp) +
  tm_fill("total_crimes", 
          style = "pretty", 
          palette = "Oranges",
          title = "Crimes") +
  tm_layout(main.title = "Crime Distribution (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2, position = c("right", "top")) +
  tm_grid(alpha =0.2)

tmap_arrange(choro_map, mys_map, ncol = 2)
```
:::

::: callout-note
#### Missing Data

Notice the missing data in Pokok Sena, which we will be rectifying in the subsequent join with aggregated state data.
:::

### 2.3.5 State-District Wrangling (Population)

#### 2.3.5.1 State-District Mismatch

The year 2019 is missing from data set, hence we will map year 2020 -\> 2019.

```{r}
population_row <- population_df %>%
  filter(year == 2020) %>%
  mutate(year = 2019) 
population_df <- bind_rows(population_df, population_row) %>% 
  mutate(state_district = paste(state, district, sep = "-"))
unique(population_df$year)
```

```{r}
state_district_population <- unique(population_df$state_district)

missing_in_sf <- setdiff(state_district_population, state_district_sf)
missing_in_population <- setdiff(state_district_sf, state_district_population)

print("State-District combinations in population_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in population_df:")
print(missing_in_population)
```

#### 2.3.5.2 Re-Mapping Districts

```{r}
population_df <- population_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    state == "KELANTAN" & district == "KECIL LOJING" ~ "GUA MUSANG",
    state == "PAHANG" & district == "CAMERON HIGHLAND" ~ "CAMERON HIGHLANDS",
    state == "PERAK" & district == "HULU PERAK" ~ "ULU PERAK",
    state == "PERAK" & district == "BAGAN DATUK" ~ "HILIR PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "MUALLIM" ~ "BATANG PADANG",
    state == "PERAK" & district == "SELAMA" ~ "LARUT DAN MATANG",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "PULAU PINANG" & district == "SP SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SP TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SP UTARA" ~ "S.P. UTARA",
    state == "TERENGGANU" & district == "KUALA NERUS" ~ "KUALA TERENGGANU",
    state == "KUALA LUMPUR" & district == "W.P. KUALA LUMPUR" ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year) %>%
  summarise(population = sum(population))

population_df
```

#### 2.3.5.3 Population Distribution

::: panel-tabset
##### Overview

```{r}
population_df_mys <- population_df %>%
  left_join(mys_sf, by = c("state" = "ADM1_EN", "district" = "ADM2_EN")) %>%
  dplyr::select(state, district, year, population, geometry)

population_df_mys <- st_as_sf(population_df_mys)
population_df_mys
```

##### Visualization

```{r}
population_df_mys_grp <- population_df_mys %>%
  group_by(state, district) %>%
  summarize(total_crimes = sum(population)/4)

mys_map <- tm_shape(mys_sf) +
  tm_polygons() +
  tm_text("ADM2_EN", size = 0.3) +
  tm_layout(main.title = "Districts (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_grid(alpha =0.2)

choro_map <- tm_shape(population_df_mys_grp) +
  tm_fill("total_crimes", 
          style = "pretty", 
          palette = "Blues",
          title = "Crimes") +
  tm_layout(main.title = "Population Distribution (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2, position = c("right", "top")) +
  tm_grid(alpha =0.2)

tmap_arrange(choro_map, mys_map, ncol = 2)
```
:::

::: callout-note
#### Similarity in Observation

We can note that the districts with more crime tend to have a higher population. Hence for a more accurate comparsion we need to adjust the crimes to per captia for the districts
:::

### 2.3.6 Joining

#### 2.3.6.1 Join with Population Data

Here we compute the crimes per 1000 capita to ensure the data is normalized

```{r}
crime_df_mys <- crime_df %>% 
  filter(year >= 2019 & year <= 2022) %>%
  left_join(population_df, by = c("state", "district", "year")) %>%
  mutate(crimes_pc = crimes/population) %>%
  dplyr::select(state, district, year, category, type, crimes, crimes_pc, population)
```

#### 2.3.6.2 Filling for `POKOK SENA` District

Given the missing data for `POKOK SENA`, we will be getting the state average for the district in this case the state of `KEDAH`

```{r}
pokok_sena_rows <- crime_df_mys %>%
  filter(state == "KEDAH") %>%
  group_by(state, year, category, type) %>%
  summarise(crimes = mean(crimes),
            crimes_pc = mean(crimes_pc),
            population = mean(population)) %>% 
  mutate(district = "POKOK SENA")

pokok_sena_rows
crime_df_mys <- bind_rows(crime_df_mys, pokok_sena_rows)
```

#### 2.3.6.3 Join with District Boundary

```{r}
crime_df_mys <- crime_df_mys %>%
  left_join(mys_sf, by = c("state" = "ADM1_EN", "district" = "ADM2_EN")) %>%
  dplyr::select(state, district, year, category, type, crimes, crimes_pc, population, geometry)

crime_df_mys <- st_as_sf(crime_df_mys)
crime_df_mys
```

### 2.3.7 Crime per Capita Distribution

```{r}
crime_df_mys_grp <- crime_df_mys %>%
  group_by(state, district) %>%
  summarize(total_crimes_pc = sum(crimes_pc)/4)

og_choro_map <- tm_shape(og_crime_df_mys_grp) +
  tm_fill("total_crimes", 
          n = 5,
          style = "equal", 
          palette = "Oranges",
          title = "Crimes") +
  tm_layout(main.title = "Crime Distribution (West Malaysia)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2, position = c("right", "top")) +
  tm_grid(alpha =0.2)

choro_map <- tm_shape(crime_df_mys_grp) +
  tm_fill("total_crimes_pc", 
          n = 5,
          style = "equal", 
          palette = "Oranges",
          title = "Crimes") +
  tm_layout(main.title = "Crime per Capita Distribution",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2, position = c("right", "top")) +
  tm_grid(alpha =0.2)

tmap_arrange(og_choro_map, choro_map, ncol = 2)
```

### 2.3.8 Correlation Plot

Next we take a quick look at how correlated the data are with across the various types of Crimes

```{r}
piv_crime_df_mys <- crime_df_mys %>%
  mutate(cat_type = paste(category, type, sep = "-")) %>%
  select(-category, -type, -crimes, -population) %>%
  pivot_wider(
    names_from = cat_type,
    values_from = crimes_pc,
    values_fill = 0
  ) 

corrplot.mixed(cor(st_drop_geometry(piv_crime_df_mys)[, 4:15]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45, 
               tl.cex = 0.5)
```

During the EDA we have noted that some crimes such as `robbery_gang_armed` tend are typically really low in record. Hence to further narrow our susbequent analysis we will group robbery as one category and vehicle theft as the another.

```{r}
piv_crime_df_mys <- piv_crime_df_mys %>%
  mutate(
    robbery = `assault-robbery_gang_armed` + `assault-robbery_gang_unarmed` + 
              `assault-robbery_solo_armed` + `assault-robbery_solo_unarmed`,
    vehicle_theft = `property-theft_vehicle_lorry` + `property-theft_vehicle_motorcar` + 
                    `property-theft_vehicle_motorcycle`
  ) %>%
  select(-`assault-robbery_gang_armed`, -`assault-robbery_gang_unarmed`, 
         -`assault-robbery_solo_armed`, -`assault-robbery_solo_unarmed`,
         -`property-theft_vehicle_lorry`, -`property-theft_vehicle_motorcar`, 
         -`property-theft_vehicle_motorcycle`) %>%
  rename_with(~str_remove(., "^assault-|^property-"))

piv_crime_df_mys
```

The final crime correlation should look like the following

```{r}
corrplot.mixed(cor(st_drop_geometry(piv_crime_df_mys)[, 4:10]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45, 
               tl.cex = 0.5)
```

::: callout-ntoe
#### Initial Analysis

Across the board it seems like only `robbery` have high correlation with `vehicle_theft`
:::

## 2.4 Data Enrichment

To further enrich our analysis we decided include our data with several more relevant datasets which may affect crime rates such labour participation rates, poverty and income inequality by district

### 2.4.1 State Wrangling

```{r}
print("Unique states in mys_sf:")
unique(mys_sf$ADM1_EN)

print("Unique states in poverty_df:")
unique(poverty_df$state)

print("Unique states in inequality_df:")
unique(inequality_df$state)

print("Unique states in labour_df:")
unique(labour_df$state)
```

```{r}
poverty_df <- poverty_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN') %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'KUALA LUMPUR'))

inequality_df <- inequality_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK' & state != 'W.P. LABUAN') %>%
          mutate(state = replace(state, state == 'W.P. KUALA LUMPUR', 'KUALA LUMPUR'),
                 state = replace(state, state == 'W.P. PUTRAJAYA', 'KUALA LUMPUR'))

labour_df <- labour_df %>%
          mutate(year = year(date),
                 state = toupper(state),
                 district = toupper(district)) %>%
          filter(state != 'SABAH' & state != 'SARAWAK')
```

```{r}
print("Unique states & years in mys_sf:")
sort(unique(mys_sf$ADM1_EN))

print("Unique states & years in poverty_df:")
sort(unique(poverty_df$state))
sort(unique(poverty_df$year))

print("Unique states & years in inequality_df:")
sort(unique(inequality_df$state))
sort(unique(inequality_df$year))

print("Unique states & years in labour_df:")
sort(unique(labour_df$state))
sort(unique(labour_df$year))
```

::: callout-note
#### Data Issues

From the data we identified 2 issues: 1. Poverty and Inequality data is missing years 2020 and 2021 2. Labour data is missing PERLIS, KUALA LUMPUR and PUTRAJAYA
:::

### 2.4.2 State-District Wrangling (Poverty & Inequaltiy)

#### 2.4.2.1 Filling Year Data

Since years 2020 and 2021 are missing from data set, we will map to prior or the next year: - 2020 -\> 2019 - 2021 -\> 2022

```{r}
poverty_rows <- poverty_df %>%
  mutate(year = ifelse(year == 2019, 2020, 2021))
poverty_df <- bind_rows(poverty_df, poverty_rows)
unique(poverty_df$year)

inequality_rows <- inequality_df %>%
  mutate(year = ifelse(year == 2019, 2020, 2021))
inequality_df <- bind_rows(inequality_df, inequality_rows)
unique(inequality_df$year)
```

#### 2.4.2.2 State-District Mismatch

Creating rows for state-district

```{r}
poverty_df <- poverty_df %>% mutate(state_district = paste(state, district, sep = "-"))
inequality_df <- inequality_df %>% mutate(state_district = paste(state, district, sep = "-"))
```

Since the data for inequality comes from the same ministry and the districts are the same we will only be checking for Poverty

```{r}
state_district_poverty <- unique(poverty_df$state_district)

missing_in_sf <- setdiff(state_district_poverty, state_district_sf)
missing_in_poverty <- setdiff(state_district_sf, state_district_poverty)

print("State-District combinations in poverty_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in poverty_df:")
print(missing_in_poverty)
```

#### 2.4.2.3 Re-Mapping Districts

```{r}
poverty_df <- poverty_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    state == "KELANTAN" & district == "KECIL LOJING" ~ "GUA MUSANG",
    state == "PERAK" & district == "HULU PERAK" ~ "ULU PERAK",
    state == "PERAK" & district == "BAGAN DATUK" ~ "HILIR PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "MUALLIM" ~ "BATANG PADANG",
    state == "PERAK" & district == "SELAMA" ~ "LARUT DAN MATANG",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "TERENGGANU" & district == "KUALA NERUS" ~ "KUALA TERENGGANU",
    state == "KUALA LUMPUR" & district == "W.P. KUALA LUMPUR" ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year) %>%
  summarise(poverty_absolute = mean(poverty_absolute),
            poverty_relative = mean(poverty_relative))

poverty_df
```

```{r}
inequality_df <- inequality_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    state == "KELANTAN" & district == "KECIL LOJING" ~ "GUA MUSANG",
    state == "PERAK" & district == "HULU PERAK" ~ "ULU PERAK",
    state == "PERAK" & district == "BAGAN DATUK" ~ "HILIR PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PERAK" & district == "MUALLIM" ~ "BATANG PADANG",
    state == "PERAK" & district == "SELAMA" ~ "LARUT DAN MATANG",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    state == "TERENGGANU" & district == "KUALA NERUS" ~ "KUALA TERENGGANU",
    state == "KUALA LUMPUR" & district == "W.P. KUALA LUMPUR" ~ "WP. KUALA LUMPUR",
    TRUE ~ district
  )) %>%
  group_by(state, district, year) %>%
  summarise(gini = mean(gini))

inequality_df
```

### 2.4.3 State-Distrcit Wrangling (Labour)

#### 2.4.3.1 State-District Mismatch

```{r}
labour_df <- labour_df %>% mutate(state_district = paste(state, district, sep = "-"))
```

```{r}
state_district_labour <- unique(labour_df$state_district)

missing_in_sf <- setdiff(state_district_labour, state_district_sf)
missing_in_labour <- setdiff(state_district_sf, state_district_labour)

print("State-District combinations in labour_df not found in mys_sf:")
print(missing_in_sf)

print("State-District combinations in mys_sf not found in labour_df:")
print(missing_in_labour)
```

#### 2.4.3.2 Re-Mapping Districts

```{r}
labour_df <- labour_df %>%
  mutate(district = case_when(
    state == "JOHOR" & district == "KULAI" ~ "KULAIJAYA",
    state == "JOHOR" & district == "TANGKAK" ~ "LEDANG",
    state == "PERAK" & district == "HULU PERAK" ~ "ULU PERAK",
    state == "PERAK" & district == "MANJUNG" ~ "MANJUNG (DINDING)",
    state == "PULAU PINANG" & district == "SEBERANG PERAI SELATAN" ~ "S.P.SELATAN",
    state == "PULAU PINANG" & district == "SEBERANG PERAI TENGAH" ~ "S.P. TENGAH",
    state == "PULAU PINANG" & district == "SEBERANG PERAI UTARA" ~ "S.P. UTARA",
    TRUE ~ district
  )) %>%
  group_by(state, district, year) %>%
  summarise(lf = mean(lf),
            lf_employed = mean(lf_employed),
            lf_unemployed = mean(lf_unemployed),
            lf_outside = mean(lf_outside),
            p_rate = mean(p_rate),
            u_rate = mean(u_rate),
            ep_ratio = mean(ep_ratio))

labour_df
```

::: callout-note
##### Missing labour data

However we do not have labor data for the following state-districts, hence we will use the national average: "PERLIS-PERLIS" "KUALA LUMPUR-WP. KUALA LUMPUR" "KUALA LUMPUR-W.P. PUTRAJAYA"
:::

### 2.4.4 Joining

#### 2.4.4.1 Join with Poverty, Inequality and Labour


```{r}
piv_full_df_mys <- piv_crime_df_mys %>%
  left_join(poverty_df, by = c("state", "district", "year")) %>%
  left_join(inequality_df, by = c("state", "district", "year")) %>%
  left_join(labour_df, by = c("state", "district", "year")) %>%
  left_join(population_df, by = c("state", "district", "year"))

piv_full_df_mys
```

#### 2.4.4.2 Data Subsitution (Labour)

```{r}
piv_full_df_mys <- piv_full_df_mys %>% 
  mutate(lf = lf/population,
         lf_employed = lf_employed/population,
         lf_unemployed = lf_unemployed/population,
         lf_outside = lf_outside/population) %>%
  select(-population)
```

```{r}
target_states <- c("PERLIS", "KUALA LUMPUR")
target_districts <- c("PERLIS", "WP. KUALA LUMPUR", "W.P. PUTRAJAYA")

avg_values <- piv_full_df_mys %>%
  filter(!(state %in% target_states & district %in% target_districts)) %>%
  summarize(
    avg_lf = mean(lf, na.rm = TRUE),
    avg_lf_employed = mean(lf_employed, na.rm = TRUE),
    avg_lf_unemployed = mean(lf_unemployed, na.rm = TRUE),
    avg_lf_outside = mean(lf_outside, na.rm = TRUE),
    avg_p_rate = mean(p_rate, na.rm = TRUE),
    avg_u_rate = mean(u_rate, na.rm = TRUE),
    avg_ep_ratio = mean(ep_ratio, na.rm = TRUE)
  )

piv_full_df_mys <- piv_full_df_mys %>%
  mutate(
    lf = ifelse(state %in% target_states & district %in% target_districts & is.na(lf), avg_values$avg_lf, lf),
    lf_employed = ifelse(state %in% target_states & district %in% target_districts & is.na(lf_employed), avg_values$avg_lf_employed, lf_employed),
    lf_unemployed = ifelse(state %in% target_states & district %in% target_districts & is.na(lf_unemployed), avg_values$avg_lf_unemployed, lf_unemployed),
    lf_outside = ifelse(state %in% target_states & district %in% target_districts & is.na(lf_outside), avg_values$avg_lf_outside, lf_outside),
    p_rate = ifelse(state %in% target_states & district %in% target_districts & is.na(p_rate), avg_values$avg_p_rate, p_rate),
    u_rate = ifelse(state %in% target_states & district %in% target_districts & is.na(u_rate), avg_values$avg_u_rate, u_rate),
    ep_ratio = ifelse(state %in% target_states & district %in% target_districts & is.na(ep_ratio), avg_values$avg_ep_ratio, ep_ratio)
  )
```

#### 2.4.4.3 Aggregate all Years

```{r}
piv_full_df_mys_agg <- piv_full_df_mys %>%
  group_by(state, district) %>%
  summarise(year = 0,
            causing_injury = mean(causing_injury),
            murder = mean(murder),
            rape = mean(rape),
            robbery = mean(robbery),
            break_in = mean(break_in),
            theft_other = mean(theft_other),
            vehicle_theft = mean(vehicle_theft),
            poverty_absolute = mean(poverty_absolute),
            poverty_relative = mean(poverty_relative),
            gini = mean(gini),
            lf = mean(lf),
            lf_employed = mean(lf_employed),
            lf_unemployed = mean(lf_unemployed),
            lf_outside = mean(lf_outside),
            p_rate = mean(p_rate),
            u_rate = mean(u_rate),
            ep_ratio = mean(ep_ratio))


piv_full_df_mys <- bind_rows(piv_full_df_mys, piv_full_df_mys_agg)
unique(piv_full_df_mys$year)
```


## 2.5 Data Selection

### 2.5.1 Visualizing the Correlation of Data

```{r}
corrplot.mixed(cor(st_drop_geometry(piv_full_df_mys %>% filter(year == 0))[, 4:20]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45,  # Slant the labels by 45 degrees
               tl.cex = 0.5)
```

### 2.5.2 Final Selection

Since the variable `ep_ratio` is highly correlated with `lf`, `lf_employed`, `lf_outside` and `p_rate` we can drop them from the dataframe
And u_rate to `lf_unemployed`

```{r}
piv_df_mys <- piv_full_df_mys %>%
  mutate(state_district = str_to_title(paste(state, district, sep = "-"))) %>%
  select(-lf, -lf_employed, -lf_unemployed, -lf_outside, -p_rate) %>%
  rename_with(~str_replace_all(., c("ep_ratio" = "employment_ratio", "u_rate" = "unemployment_rate"))) %>%
  select(state_district, everything())
  
colnames(piv_df_mys)
```

```{r}
corrplot.mixed(cor(st_drop_geometry(piv_df_mys %>% filter(year == 0))[, 5:16]),
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black",
               tl.srt = 45,
               tl.cex = 0.5)
```

```{r}
write_rds(piv_df_mys, "./data/rds/pivot_df.rds")
```

```{r}
piv_df_mys <- read_rds("./data/rds/pivot_df.rds")
```

# 3. Analysis Preparations

## 3.1 Variable Exploration

### 3.1.1 Data Standardisation

```{r}
piv_df_mys.all <- piv_df_mys %>% filter(year == 0)
clust_rownames <- piv_df_mys.all$state_district
og_clust_vars <- piv_df_mys.all %>% 
  select(-state_district, -state, -district, -year) %>% 
  st_drop_geometry()
  
clust_vars <- og_clust_vars %>% normalize()

rownames(og_clust_vars) <- clust_rownames
rownames(clust_vars) <- clust_rownames
head(clust_vars, 10)
```

### 3.1.2 Histograms

::: panel-tabset

#### Original

```{r}
#| fig-width: 15
#| fig-height: 7

hist_list <- list()

for (col in colnames(og_clust_vars)) {
  hist_list[[col]] <- ggplot(data = og_clust_vars, aes(x = .data[[col]])) +
    geom_histogram(bins = 20, color = "black", fill = "lightblue") +
    ggtitle(str_to_title(str_replace_all(col, "_", " ")))
}

grid.arrange(grobs = hist_list, ncol = 4, nrow = 3)
```

#### Min-Max Standardisation

```{r}
#| fig-width: 15
#| fig-height: 7

hist_list <- list()

for (col in colnames(clust_vars)) {
  hist_list[[col]] <- ggplot(data = clust_vars, aes(x = .data[[col]])) +
    geom_histogram(bins = 20, color = "black", fill = "lightblue") +
    ggtitle(str_to_title(str_replace_all(col, "_", " ")))
}

grid.arrange(grobs = hist_list, ncol = 4, nrow = 3)
```
::: 

### 3.1.3 Density Plot

::: panel-tabset

#### Original

```{r}
#| fig-width: 15
#| fig-height: 7

hist_list <- list()

for (col in colnames(og_clust_vars)) {
  hist_list[[col]] <- ggplot(data = og_clust_vars, aes(x = .data[[col]])) +
    geom_density(color = "black", fill = "lightblue") +
    ggtitle(str_to_title(str_replace_all(col, "_", " ")))
}

grid.arrange(grobs = hist_list, ncol = 4, nrow = 3)
```

#### Min-Max Standardisation

```{r}
#| fig-width: 15
#| fig-height: 7

hist_list <- list()

for (col in colnames(clust_vars)) {
  hist_list[[col]] <- ggplot(data = clust_vars, aes(x = .data[[col]])) +
    geom_density(color = "black", fill = "lightblue") +
    ggtitle(str_to_title(str_replace_all(col, "_", " ")))
}

grid.arrange(grobs = hist_list, ncol = 4, nrow = 3)
```
::: 

### 3.1.4 Boxplots

::: panel-tabset

#### Original

```{r}
#| fig-width: 15
#| fig-height: 7

hist_list <- list()

for (col in colnames(og_clust_vars)) {
  hist_list[[col]] <- ggplot(data = og_clust_vars, aes(x = .data[[col]])) +
    geom_boxplot(color = "black", fill = "lightblue") +
    ggtitle(str_to_title(str_replace_all(col, "_", " ")))
}

grid.arrange(grobs = hist_list, ncol = 4, nrow = 3)
```

#### Min-Max Standardisation

```{r}
#| fig-width: 15
#| fig-height: 7

hist_list <- list()

for (col in colnames(clust_vars)) {
  hist_list[[col]] <- ggplot(data = clust_vars, aes(x = .data[[col]])) +
    geom_boxplot(color = "black", fill = "lightblue") +
    ggtitle(str_to_title(str_replace_all(col, "_", " ")))
}

grid.arrange(grobs = hist_list, ncol = 4, nrow = 3)
```
::: 

## 3.2 Selecting No. of Clusters

### 3.2.1 Compute NB Clust

```{r}
set.seed(12345)
nbc <- NbClust(clust_vars, distance = "euclidean", min.nc = 5, max.nc = 10, method = "ward.D")
```


### 3.2.2 Visualizing NB Clust

::: panel-tabset

#### Avg Silhouette Width

```{r}
fviz_nbclust(clust_vars, FUNcluster = hcut, method = "silhouette", k.max = 10)
```

#### Within Sum of Square

```{r}
fviz_nbclust(clust_vars, FUNcluster = hcut, method = "wss", k.max = 10)
```

#### Gap Statistics

```{r}
fviz_nbclust(clust_vars, FUNcluster = hcut, method = "gap_stat", k.max = 10)
```
:::

## 3.3 Hierarchical Clustering

```{r}
n_clust = 7
```

### 3.3.1 Compute Prox Mat

```{r}
proxmat <- dist(clust_vars, method = 'euclidean')
```

### 3.3.2 Compute Cluster

#### 3.3.2.1 Selecting Clustering Method

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(clust_vars, method = x)$ac
}

map_dbl(m, ac)
```

#### 3.3.2.2 Perform Clustering

```{r}
clust_method <- 'ward.D'
hclust_ward <- hclust(proxmat, method = clust_method)
```

#### 3.3.2.3 Visualizing Cluster

::: panel-tabset
##### Dendogram

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = n_clust, 
            border = 2:5)
```

##### Heatmap

```{r}
heatmaply(normalize(data.matrix(clust_vars)),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = clust_method,
          seriate = "OLO",
          colors = OrRd,
          k_row = n_clust,
          margins = c(NA,50,50,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of West Malaysia by Crime indicators",
          xlab = "Crime and Demographic Indicators",
          ylab = "Districts"
          )
```


##### Cluster

```{r}
groups <- as.factor(cutree(hclust_ward, k=n_clust))
hclust_ward_cluster <- cbind(piv_df_mys.all, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)

hclust_ward_plot <- tm_shape(hclust_ward_cluster) +
  tm_fill("CLUSTER", 
          palette = "Set3",
          title = "Cluster") +
  tm_layout(main.title = paste("Hierarchical Clustering - K:", n_clust),
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 3, position = c("right", "top")) +
  tm_grid(alpha =0.2)

hclust_ward_plot
```
:::

### 3.3.3 Compute Cluster (Geo Constrained)

#### 3.3.3.1 Compute distmat

```{r}
dist <- st_distance(piv_df_mys.all, piv_df_mys.all)
distmat <- as.dist(dist)
```

#### 3.3.3.2 Compute Choicalpha

```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=n_clust, graph = TRUE)
```

#### 3.3.3.3 Perform Clustering

```{r}
hclust_geo <- hclustgeo(proxmat, distmat, alpha = 0.1)
```

#### 3.3.3.4 Visualizing Cluster

::: panel-tabset
##### Dendogram

```{r}
plot(hclust_geo, cex = 0.6)
rect.hclust(hclust_geo, 
            k = n_clust, 
            border = 2:5)
```

##### Cluster

```{r}
groups <- as.factor(cutree(hclust_geo, k=n_clust))
hclust_geo_cluster <- cbind(piv_df_mys.all, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
hclust_geo_plot <- tm_shape(hclust_geo_cluster) +
  tm_fill("CLUSTER", 
          palette = "Set3",
          title = "Cluster") +
  tm_layout(main.title = paste("Hierarchical Clustering (Geo) - K:", n_clust),
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 3, position = c("right", "top")) +
  tm_grid(alpha =0.2)

hclust_geo_plot
```

##### Comparison

```{r}
tmap_arrange(hclust_ward_plot, hclust_geo_plot, ncol = 2)
```
:::

## 3.4 Skater Clustering

### 3.4.1 Generating Neighbours

```{r}
nb <- poly2nb(piv_df_mys.all)
summary(nb)
```

3 Disjoint 1: MainLand 2: Langkawi 3: Pulau Pinang

```{r}
coords <- st_coordinates(st_centroid(st_geometry(piv_df_mys.all)))
plot(st_geometry(piv_df_mys.all), 
     border=grey(.5))
plot(nb,
     coords, 
     col="blue", 
     add=TRUE)
```

### 3.4.2 Fixing Neighbours

```{r}
components <- n.comp.nb(nb)
which(components$comp.id == 2)
piv_df_mys.all$state_district[which(components$comp.id == 2)]
which(components$comp.id == 3)
piv_df_mys.all$state_district[which(components$comp.id == 3)]
```

#### 3.4.2.1 Langkawi

Given that there are water routes to Langkawi from Kuala Perlis, Kuala Kedah and Penang we will add that in

![](assets/ferry_lanes.jpeg)

```{r}
indices_langkawi_boat <- which(piv_df_mys.all$state_district %in% c("Perlis-Perlis", "Kedah-Kota Setar", "Pulau Pinang-Timur Laut"))

indices_langkawi_boat
piv_df_mys.all$state_district[indices_langkawi_boat]
```

```{r}
nb[[17]] <- as.integer(c(13, 66, 71))
nb[[13]] <- c(nb[[13]], as.integer(17))
nb[[66]] <- c(nb[[66]], as.integer(17))
nb[[71]] <- c(nb[[71]], as.integer(17))
```

#### 3.4.2.2 Pulau Pinang

For Penang island we will be mapping by the 2 land links available 1. Timur Laut -\> S.P. Tengah 2. Barat Daya -\> S.P. Selatan

![](assets/penang_land_link.png)

```{r}
tm_shape(mys_sf %>% filter(ADM1_EN=="PULAU PINANG")) +
  tm_polygons() +
  tm_text("ADM2_EN", size = 0.3)
```

```{r}
indices_pulau_pinang <- which(startsWith(piv_df_mys.all$state_district, "Pulau Pinang"))

indices_pulau_pinang
piv_df_mys.all$state_district[indices_pulau_pinang]
```

```{r}
# BARAT DAYA
nb[[67]] <- c(nb[[67]], as.integer(68))
nb[[68]] <- c(nb[[68]], as.integer(67))

# TIMUR LAUT
nb[[71]] <- c(nb[[71]], as.integer(70))
nb[[70]] <- c(nb[[70]], as.integer(71))
```

#### 3.4.2.3 Visualizing Fix

```{r}
coords <- st_coordinates(st_centroid(st_geometry(piv_df_mys.all)))
plot(st_geometry(piv_df_mys.all), 
     border=grey(.5))
plot(nb,
     coords, 
     col="blue", 
     add=TRUE)
```

### 3.4.3 Compute MST

#### 3.4.3.1 Compute `nb` Weights

```{r}
lcosts <- nbcosts(nb, clust_vars)
clust_vars.w <- nb2listw(nb, 
                   lcosts, 
                   style="B")
summary(clust_vars.w)
```

#### 3.4.3.2 Generate MST

```{r}
clust_vars.mst <- mstree(clust_vars.w)
head(clust_vars.mst)
```

```{r}
plot(st_geometry(piv_df_mys.all), 
                 border=gray(.5))
plot.mst(clust_vars.mst, 
         coords, 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

### 3.4.4 Compute Cluster

```{r}
clust <- spdep::skater(edges = clust_vars.mst[,1:2], 
                 data = clust_vars, 
                 method = "euclidean", 
                 ncuts = (n_clust - 1))

str(clust)
```

### 3.4.5 Visualizing Clusters

::: panel-tabset
#### MST

```{r}
#| warning: false
plot(st_geometry(piv_df_mys.all), 
     border=gray(.5))
plot(clust, 
     coords, 
     cex.lab=.5,
     add=TRUE)
```

#### Clusters

```{r}
groups_mat <- as.matrix(clust$groups)
skater_cluster <- cbind(piv_df_mys.all, as.factor(groups_mat)) %>%
  rename(`CLUSTER`=`as.factor.groups_mat.`)
skater_plot <- tm_shape(skater_cluster) +
  tm_fill("CLUSTER", 
          palette = "Set3",
          title = "Cluster") +
  tm_layout(main.title = paste("Skater Clustering - K:", n_clust),
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 3, position = c("right", "top")) +
  tm_grid(alpha =0.2)

skater_plot
```
:::

## 3.5 Intepreting Results


### 3.5.1 Comparing Clusters

```{r}
#| fig-width: 10
#| fig-height: 6
tmap_arrange(hclust_ward_plot, hclust_geo_plot, skater_plot, ncol = 3)
```

### 3.5.2 Parral Coordinates (Crime)

::: panel-tabset

#### H-Cluster (Ward)

```{r}
#| fig-width: 16
#| fig-height: 6

ggparcoord(data = hclust_ward_cluster, 
           columns = c(5:11), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

#### H-Cluster (Geo)

```{r}
#| fig-width: 16
#| fig-height: 6

ggparcoord(data = hclust_geo_cluster, 
           columns = c(5:11), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

#### Skater-Cluster

```{r}
#| fig-width: 16
#| fig-height: 6

ggparcoord(data = skater_cluster, 
           columns = c(5:11), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```


:::

### 3.5.3 Parral Coordinates (Demographics)

::: panel-tabset

#### H-Cluster (Ward)

```{r}
#| fig-width: 16
#| fig-height: 6

ggparcoord(data = hclust_ward_cluster, 
           columns = c(12:16), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

#### H-Cluster (Geo)

```{r}
#| fig-width: 16
#| fig-height: 6

ggparcoord(data = hclust_geo_cluster,  
           columns = c(12:16), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

#### Skater Cluster

```{r}
#| fig-width: 16
#| fig-height: 6

ggparcoord(data = skater_cluster,  
           columns = c(12:16), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ CLUSTER) + 
  theme(axis.text.x = element_text(angle = 30))
```

:::

### 3.5.4 Cluster Profiling

::: panel-tabset

#### H-Cluster (Ward)

```{r}
hclust_ward_prof <- hclust_ward_cluster %>% 
  st_drop_geometry() %>%
  group_by(CLUSTER) %>%
  summarise(mean_causing_injury = mean(causing_injury),
            mean_murder = mean(murder),
            mean_rape = mean(rape),
            mean_robbery = mean(robbery),
            mean_break_in = mean(break_in),
            mean_theft_other = mean(theft_other),
            mean_vehicle_theft = mean(vehicle_theft))
```


```{r}
#| fig-width: 15
#| fig-height: 7
ggplot(hclust_ward_prof %>% pivot_longer(-CLUSTER, names_to = "metric", values_to = "value"), 
       aes(x = CLUSTER, y = value, fill = CLUSTER)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ metric, scales = "free_y", ncol = 4) +  
  scale_fill_brewer(palette = "Set3") +
  theme_minimal()
```

```{r}
heatmaply(as.matrix(hclust_ward_prof[, 2:ncol(hclust_ward_prof)]), 
          dendrogram = 'none',
          Colv = FALSE, 
          colors = OrRd,
          labRow = hclust_ward_prof$CLUSTER,
          margins = c(NA,100,50,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Cluster Heatmap (H-Clust Geo)",
          xlab = "Crime Indicators",
          ylab = "Clusters")
```

#### H-Cluster (Geo)

```{r}
hclust_geo_prof <- hclust_geo_cluster %>% 
  st_drop_geometry() %>%
  group_by(CLUSTER) %>%
  summarise(mean_causing_injury = mean(causing_injury),
            mean_murder = mean(murder),
            mean_rape = mean(rape),
            mean_robbery = mean(robbery),
            mean_break_in = mean(break_in),
            mean_theft_other = mean(theft_other),
            mean_vehicle_theft = mean(vehicle_theft))
```


```{r}
#| fig-width: 15
#| fig-height: 7
ggplot(hclust_geo_prof %>% pivot_longer(-CLUSTER, names_to = "metric", values_to = "value"), 
       aes(x = CLUSTER, y = value, fill = CLUSTER)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ metric, scales = "free_y", ncol = 4) +  
  scale_fill_brewer(palette = "Set3") +
  theme_minimal()
```

```{r}
heatmaply(as.matrix(hclust_geo_prof[, 2:ncol(hclust_geo_prof)]), 
          dendrogram = 'none',
          Colv = FALSE, 
          colors = OrRd,
          labRow = hclust_geo_prof$CLUSTER,
          margins = c(NA,100,50,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Cluster Heatmap (H-Clust Geo)",
          xlab = "Crime Indicators",
          ylab = "Clusters")
```

#### Skater Cluster

```{r}
skater_prof <- skater_cluster %>% 
  st_drop_geometry() %>%
  group_by(CLUSTER) %>%
  summarise(mean_causing_injury = mean(causing_injury),
            mean_murder = mean(murder),
            mean_rape = mean(rape),
            mean_robbery = mean(robbery),
            mean_break_in = mean(break_in),
            mean_theft_other = mean(theft_other),
            mean_vehicle_theft = mean(vehicle_theft))
```


```{r}
#| fig-width: 15
#| fig-height: 7
ggplot(skater_prof %>% pivot_longer(-CLUSTER, names_to = "metric", values_to = "value"), 
       aes(x = CLUSTER, y = value, fill = CLUSTER)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ metric, scales = "free_y", ncol = 4) +  
  scale_fill_brewer(palette = "Set3") +
  theme_minimal()
```

```{r}
heatmaply(as.matrix(skater_prof[, 2:ncol(skater_prof)]), 
          dendrogram = 'none',
          Colv = FALSE, 
          colors = OrRd,
          labRow = skater_prof$CLUSTER,
          margins = c(NA,100,50,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Cluster Heatmap (Skater)",
          xlab = "Crime Indicators",
          ylab = "Clusters")
```

::: 

# 4. App Story Board

## 4.1 Overview

## 4.2 Variable Exploration

## 4.3 Hirerachical Clustering

## 4.4 Skater Clustering

## 4.5 Intepreting Results

(Story Board)\[https://giniceseah.netlify.app/posts/2021-07-31-storyboard/\]

# 5. Reflection
