---
title: "Hands-on Exercise 1"
author: "Jeffery Lau"
date: 08-17-2024
description: |
  In this
categories:
  - Hands-on
format:
  html:
    toc: true
execute: 
  eval: true
  echo: true
  warning: false
---

# 1. Getting Started

The following code chunk uses p_load() to install and load the sf and tidyverse packages.

```{r}
pacman::p_load(sf, tidyverse)
```

# 2. Importing data

The following code chunk will import the Master Plan and Cycling Path data in ESRI shapefile format and Preschool data in kml file format into R.

```{r}
mpsz = st_read(dsn="data/geospatial",
                layer="MP14_SUBZONE_WEB_PL")

cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")

preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

# 3. Working with Simple Feature Data Frame

This section document ways to retrieve information from and work with data frames

1.  Using `st_geometry()` function we can view basic information of the data frame

```{r}
st_geometry(mpsz)
```

2.  Using `glimpse()` we can view the associated attributes of the data frame

```{r}
glimpse(mpsz)
```

3.  Using `head()` we can retrieve the complete information of the feature object

```{r}
head(mpsz, n=5)
```

# 4. Plotting the Geospatial Data

To perform a simple plot use `plot()`, in this case the default plot is a multi-plot of all attributes.

```{r}
plot(mpsz)
```

To plot just the geometry, use `st_geometry()` in the `plot()` function.

```{r}
plot(st_geometry(mpsz))
```

To view a specific attribute use the following

```{r}
plot(mpsz["PLN_AREA_N"])
```

# 5. Map Projection

In the event when the coordinate system of the source data is either missing or wrongly assigned we will have to update it.

## 5.1 Assign EPSG Code

In the case of `mpsz` it is projected in `SVY 21` with EPSG code 3414, using `st_crs()` we can see that the data is projected with EPSG code 9001 instead.

```{r}
st_crs(mpsz)
```

In order to update EPSG code to 3414 we can set the crs using the `st_set_crs()`

```{r}
 mpsz3414 <- st_set_crs(mpsz, 3414)
```

The crs for the mpsz data should now be assigned appropriately

```{r}
st_crs(mpsz3414)
```

## 5.2 Re-Project CRS

In the case of the Preschool data, it is initially projected in `WGS 84`

```{r}
st_geometry(preschool)
```

In order to reproject the CRS from `WGS 84` to `SVY 21` we have to use `st_transform()` function instead

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

The crs for the preschool data should now be assigned appropriately as well

```{r}
st_geometry(preschool3414)
```

# 6. Working with Aspatial Data

## 6.1 Importing data

AirBnb data is a listing and should be loaded with `read_csv()`

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

Using `list()` we can view the listings

```{r}
list(listings)
```

We assume the data uses the `wgs84` Geographic Coordinate System

## 6.2 Aspatial data to `sf` Data Frame

The aspatial data will first be converted into an sf data frame and re-projected into the `SVY 21` crs.

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

The created data frame shows that geometry has been added while longitude and latitude have been dropped

```{r}
glimpse(listings_sf)
```

# 7. Geoprocessing `sf` Data Frame

## 7.1 Buffering

Scenario: The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

Using the `st_buffer()` we can first compute the 5-meter buffer around paths of the cycling data

```{r}
buffer_cycling <- st_buffer(cyclingpath,
                              dist=5, nQuadSegs = 30)
```

Then the area is calculated

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Finally the `sum()` is used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

## 7.2 Point-in-polygon count

Scenario: A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

Using `st_intersects()` we could locate the preschool in each planning subzone from the master plan, and using the `length()` we can calculate the number of school in their respective subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

Use `summary()` to get the summarised statistics of the `PreSch Count` field

```{r}
summary(mpsz3414$`PreSch Count`)
```

Then, to list the planning subzone with the most number of pre-schools we could use `top_n()`

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Next, using the `st_aera()` we can calculate the area of preschool by subzone

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, using `mutate()` to compute the density by dividing the `PreSch Count` over the calculated `Area` field

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# 8. Exploratory Data Analysis (EDA)

Using `hist()` we can view the distribution of `PreSch Density`

```{r}
hist(mpsz3414$`PreSch Density`)
```

This can further customized using `ggplot2` such as the colors, no. of bins, title etc.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="azure4", 
                 fill="aquamarine") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

Using `ggplot2` it can also be plotted as a scatterplot; which shows the relationship between **Pre-school Density and Pre-school Count.**

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="cadetblue", 
             fill="black") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
