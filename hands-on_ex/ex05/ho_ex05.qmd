---
title: "Hands-on Exercise 5"
author: "Jeffery Lau"
date: 09-13-2024
date-modified: "last-modified"
description: |
  In this exercise we learn about spatial weights and applications
categories:
  - Hands-on
format:
  html:
    toc: true
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. Overview

Spatial weights matrices are fundamental tools in spatial analysis. They quantify the spatial relationships between geographic features, such as points, lines, or polygons. These relationships can be based on distance, contiguity, or other spatial criteria.

# 2. Setup

## 2.1 Loading Packages

We will be using the `spdep` package which is used for the creation and manipulation of spatial weights matrices. These spatial weights matrices are essential for tasks like spatial autocorrelation analysis, spatial regression modeling, and understanding the spatial distribution of phenomena.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 2.2 Importing Data

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 2.3 Relational Join

Next we update the attribute table of hunan joined based by county.

```{r}
hunan <- left_join(hunan, hunan2012) %>%
  select(1:4, 7, 15)
```

## 2.4 Visualising Regional Development Indicator

Next we take a look at the GDPPC across hunan and their individual country.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# 3. Contiguity Based Neighbours

There are 2 types of Contiguity Based Neighbours 1. Queen contiguity is often used when you want to capture both direct and indirect spatial relationships between features. It is suitable for situations where features are irregularly shaped or have complex spatial relationships, just like how a queen can move diagonally whereas a rook may not. 2. Rook contiguity is often used when you want to focus on direct spatial relationships between features. It is suitable for situations where features are regularly shaped or have simple spatial relationships.

## 3.1 QUEEN Contiguity Based Neighbours

Using `poly2nb` we can find the number of neighbours for each county, with the max being 11 in all direction, and 2 with just 1 neighbour.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

To get the neighbours for the first area unit 1, which have 5 units. The first county being Anxing

```{r}
wm_q[[1]]
hunan$County[1]
```

To get for all it's 5 neighbours, and their respective GDPPC.

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
nb1 <- hunan$GDPPC[wm_q[[1]]]
nb1
```

Weight Matrix

```{r}
str(wm_q)
```

## 3.2 ROOK Contiguity Based Neighbours

Notice how now with rook we have lesser max link at county taoyuan (85), from 10 to 11. Lets try to visualize this in the next section.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

## 3.3 Visualising Contiguity Weights

To do so we need the centroids of each polygon to plot there relations, we start by extracting the long and lat of each country and combine the coordinates

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
head(coords)
```

### 3.3.1 Plotting QUEEN Map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### 3.3.2 Plotting ROOK Map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### 3.3.3 Side by Side Comparison

Notice how Taoyuan was able to connect with the diagonal county touching at just a point, sandwich between 2 other counties with the QUEEN?

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# 4. Distance Based Neighbours

Next we'll take a look at using `dnearneigh()` to identify neighbour based on distance

## 4.1 Determining cut-off distance

Start with `knearneigh` by getting the points belonging to set of k nearest neighbours of each other then convert it into nb class with `knn2nb`

Using `nbdists` to get the length of neighbour relationship edges. Returns coordinate pairs if projected

```{r}
k1 <- knn2nb(knearneigh(coords))
summary(k1)

k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

## 4.2 Computing fixed distance weight matrix

From the previous summary we could tell the largest first nearest neighbour distance is 61.79km, so using an upper limit can guarantee that we will at least have 1 neighbour.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
summary(wm_d62)
```

```{r}
str(wm_d62)
```

For a formatted output we can use table() and card().

```{r}
table(hunan$County, card(wm_d62))
```

## 4.3 Visualising Distance Weights

Following a plot of the nearest neighbour plot and the distance based neighbours we have computed

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

## 4.4 Adaptive distance weight matrix

Now lets pick the no. of nearest neighbours to be 6.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
summary(knn6)
```

```{r}
str(knn6)
```

### 4.4.1 Side by Side Comparison

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, pch = 19, cex = 0.6, add=TRUE, col="red" )
plot(hunan$geometry, border="lightgrey", main="6 nearest neighbours")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# 5. Inversed Distance Weights (IDW)

Inversed distance weighting is a method used to assign weights to geographic features based on their distance from a reference point. Features closer to the reference point are assigned higher weights, while those farther away are assigned lower weights. This weighting scheme is often used in spatial interpolation and analysis to estimate values at unsampled locations based on the values of nearby sampled locations.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

# 6. Row Standardised Weights Matrix

Row Standardized Weights are another common method used to assign weights to geographic features. Unlike inverse distance weighting, which assigns weights based on distance, row standardized weights are calculated by dividing each weight in a row of the spatial weights matrix by the sum of all weights in that row. This ensures that the sum of weights for each feature equals 1, effectively normalizing the weights.

We will assign equal weight style W and assign 1/x weight where x is no. of neighbours.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

Weight of the first polygon's neighbours type

```{r}
rswm_q$weights[1]
```

For more robust option we can use the style B to derive the row standardised distance weight matrix.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

Weight of the first polygon's neighbours type

```{r}
rswm_ids$weights[1]
```

Compare the 2 weights summar

```{r}
summary(unlist(rswm_q$weights))
summary(unlist(rswm_ids$weights))
```

# 7. Spatial Weight Matrix Application

Spatial lag variables are created by incorporating spatial relationships into a statistical model. They capture the influence of neighboring observations on a particular variable. In essence, a spatial lag of a variable at a given location is the weighted average of the variable's values at neighboring locations.

1.  Spatial lag with row-standardized weights: Weights are calculated by dividing each weight in a row by the sum of all weights in that row, normalizing the weights. This ensures that the sum of weights for each feature equals 1, effectively normalizing the weights.
2.  Spatial lag as a sum of neighboring values: Weights are simply set to 1 for each neighbor.
3.  Spatial window average: Similar to the sum of neighboring values, but the spatial lag is divided by the number of neighbors to obtain an average.
4.  Spatial window sum: This is equivalent to the spatial lag as a sum of neighboring values.

## 7.1 Spatial lag with row-standardized weights

We compute the average neighbour GDPPC value for our lagged values.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

GDPPC for the 1st polygon's 5 neighbours

```{r}
nb1 <- hunan$GDPPC[wm_q[[1]]]
nb1
```

Append lagged values to the sf dataframe

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

Comparison of GDPPC vs GDPPC spatial lag (GDDPC vs RSW)

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## 7.2 Spatial lag as a sum of neighbouring values

This method will assign 1 per neighbour of the polygon.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Append lagged value to sf dataframe

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
hunan <- left_join(hunan, lag.res)
```

Comparison of GDPPC vs GDPPC spatial lag value (GDDPC vs SNV)

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## 7.3 Spatial Window Average

In this method we add a diagonal element to neighbour, the polygon itself is added too

```{r}
wm_qs <- include.self(wm_q)
wm_qs[[1]]
```

Re-compute the weights with `nb2listw`

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Compute the lag variable from the weights

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, hunan$GDPPC)
lag_w_avg_gpdpc
```

Append lagged value to sf dataframe

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag_w_avg_gpdpc)
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
hunan <- left_join(hunan, lag_wm_qs.res)
```

We can also use `kable` from knitr to compare lagged value and spatial window average values.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Comparison of GDPPC vs GDPPC spatial lag value (RSW vs SWA)

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

## 7.4 Spatial Window Sum

Similar to window average but without using row-standardised weights. Assign binary weights to neighbour structure which includes the diagonal element.

```{r}
# Add the diagonal again
wm_qs <- include.self(wm_q)
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Using `nb2listw` and `glist` we assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Compute the lag variable from the weights

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Append lagged value to sf dataframe

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Compare lagged value and spatial window sum values.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Comparison of GDPPC vs GDPPC spatial lag value (SNV vs SWS)

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

## 7.5 Comparison of all 4

```{r}
tmap_arrange(lag_gdppc, lag_sum_gdppc, w_avg_gdppc, w_sum_gdppc, asp=1, nrow =2 , ncol=2)
```
